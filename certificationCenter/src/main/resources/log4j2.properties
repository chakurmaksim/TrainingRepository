name=PropertiesConfig
# path to log file
property.filename=application
# default filter
filter.threshold.type = ThresholdFilter
# if the level of the displayed message is lower than the level of the registrar the message will not display
filter.threshold.level = debug
# appender for console output
appender.console.type = Console
appender.console.name = STDOUT
appender.console.layout.type = PatternLayout
appender.console.layout.pattern = %m%n
# rolling appender allows you to create an archive after reaching a certain file size or with a certain frequency
appender.rolling.type=RollingFile
appender.rolling.name=RollingFile
# name of the log file
appender.rolling.fileName=${filename}.log
# name of the archive
appender.rolling.filePattern=${filename}.%d{yyyy-MM-dd}.log.gz
appender.rolling.layout.type=PatternLayout
# pattern for writing to the log file
appender.rolling.layout.pattern=%d{yyyy-MM-dd HH:mm:ss} [%-5level] %m%n
# policy for the rolling appender
appender.rolling.policies.type=Policies
# appender allows you to create an archive after reaching a certain file size
appender.rolling.policies.size.type=SizeBasedTriggeringPolicy
# maximum file size
appender.rolling.policies.size.size=1MB
appender.rolling.strategy.type=DefaultRolloverStrategy
# specified number of archives will be created
appender.rolling.strategy.max=3
# package name
logger.rolling.name=by.training.certificationCenter
# level of the registrar
logger.rolling.level=error
# need to display a message in the root log (true or false)?
logger.rolling.additivity=true
logger.rolling.appenderRef.rolling.ref=RollingFile
# level of the root registrar
rootLogger.level = info
rootLogger.appenderRef.stdout.ref = STDOUT